// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTSCHEMA_TESTSCHEMA_H_
#define FLATBUFFERS_GENERATED_TESTSCHEMA_TESTSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace TestSchema {

struct TestObject;
struct TestObjectBuilder;

struct TestObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DATA = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct TestObjectBuilder {
  typedef TestObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(TestObject::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(TestObject::VT_NAME, name);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(TestObject::VT_DATA, data);
  }
  explicit TestObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TestObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TestObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TestObject> CreateTestObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  TestObjectBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TestObject> CreateTestObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return TestSchema::CreateTestObject(
      _fbb,
      id,
      name__,
      data__);
}

inline const TestSchema::TestObject *GetTestObject(const void *buf) {
  return ::flatbuffers::GetRoot<TestSchema::TestObject>(buf);
}

inline const TestSchema::TestObject *GetSizePrefixedTestObject(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestSchema::TestObject>(buf);
}

inline bool VerifyTestObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestSchema::TestObject>(nullptr);
}

inline bool VerifySizePrefixedTestObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestSchema::TestObject>(nullptr);
}

inline void FinishTestObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestSchema::TestObject> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestSchema::TestObject> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TestSchema

#endif  // FLATBUFFERS_GENERATED_TESTSCHEMA_TESTSCHEMA_H_
